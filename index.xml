<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eleven</title>
    <link>http://veh47.github.io/</link>
    <description>Recent content on Eleven</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 09 Jan 2020 11:56:39 +0800</lastBuildDate>
    
        <atom:link href="http://veh47.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go性能调优</title>
      <link>http://veh47.github.io/post/go%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</link>
      <pubDate>Thu, 09 Jan 2020 11:56:39 +0800</pubDate>
      
      <guid>http://veh47.github.io/post/go%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</guid>
      
        <description>在计算机性能调试领域里，profiling 是指对应用程序的画像，画像就是应用程序使用 CPU 和内存的情况。 Go语言是一个对性能特别看重的语言，因此</description>
      
    </item>
    
    <item>
      <title>Go语言操作MongoDB</title>
      <link>http://veh47.github.io/post/go%E8%AF%AD%E8%A8%80%E6%93%8D%E4%BD%9Cmongodb/</link>
      <pubDate>Thu, 09 Jan 2020 11:46:40 +0800</pubDate>
      
      <guid>http://veh47.github.io/post/go%E8%AF%AD%E8%A8%80%E6%93%8D%E4%BD%9Cmongodb/</guid>
      
        <description>mongoDB是目前比较流行的一个基于分布式文件存储的数据库，它是一个介于关系数据库和非关系数据库(NoSQL)之间的产品，是非关系数据库当</description>
      
    </item>
    
    <item>
      <title>Go语言操作Redis</title>
      <link>http://veh47.github.io/post/go%E8%AF%AD%E8%A8%80%E6%93%8D%E4%BD%9Credis/</link>
      <pubDate>Thu, 09 Jan 2020 11:39:13 +0800</pubDate>
      
      <guid>http://veh47.github.io/post/go%E8%AF%AD%E8%A8%80%E6%93%8D%E4%BD%9Credis/</guid>
      
        <description>Redis是一个开源的内存数据库，Redis提供了多种不同类型的数据结构，很多业务场景下的问题都可以很自然地映射到这些数据结构上。除此之外，</description>
      
    </item>
    
    <item>
      <title>Go语言操作MySQL</title>
      <link>http://veh47.github.io/post/go%E8%AF%AD%E8%A8%80%E6%93%8D%E4%BD%9Cmysql/</link>
      <pubDate>Thu, 09 Jan 2020 11:14:01 +0800</pubDate>
      
      <guid>http://veh47.github.io/post/go%E8%AF%AD%E8%A8%80%E6%93%8D%E4%BD%9Cmysql/</guid>
      
        <description>MySQL是常用的关系型数据库，本文介绍了Go语言如何操作MySQL数据库。 Go语言中的database/sql包提供了保证SQL或类SQL</description>
      
    </item>
    
    <item>
      <title>Golang网络编程基础</title>
      <link>http://veh47.github.io/post/golang%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 02 Jan 2020 10:17:44 +0800</pubDate>
      
      <guid>http://veh47.github.io/post/golang%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</guid>
      
        <description>现在我们几乎每天都在使用互联网，我们前面已经学习了如何编写Go语言程序，但是如何才能让我们的程序通过网络互相通信呢？ 本章我们就一起来学习下G</description>
      
    </item>
    
    <item>
      <title>Golang标准包net-http包</title>
      <link>http://veh47.github.io/post/golang%E6%A0%87%E5%87%86%E5%8C%85net-http%E5%8C%85/</link>
      <pubDate>Thu, 02 Jan 2020 10:02:22 +0800</pubDate>
      
      <guid>http://veh47.github.io/post/golang%E6%A0%87%E5%87%86%E5%8C%85net-http%E5%8C%85/</guid>
      
        <description>Go语言内置的net/http包十分的优秀，提供了HTTP客户端和服务端的实现。 HTTP协议 超文本传输协议（HTTP，HyperText Transfer P</description>
      
    </item>
    
    <item>
      <title>Golang标准包contest</title>
      <link>http://veh47.github.io/post/golang%E6%A0%87%E5%87%86%E5%8C%85contest/</link>
      <pubDate>Thu, 02 Jan 2020 09:49:30 +0800</pubDate>
      
      <guid>http://veh47.github.io/post/golang%E6%A0%87%E5%87%86%E5%8C%85contest/</guid>
      
        <description>在 Go http包的Server中，每一个请求在都有一个对应的 goroutine 去处理。请求处理函数通常会启动额外的 goroutine 用来访问后端服务，比如数据库和RPC服务。</description>
      
    </item>
    
    <item>
      <title>Go语言中的单元测试</title>
      <link>http://veh47.github.io/post/go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Tue, 31 Dec 2019 18:14:47 +0800</pubDate>
      
      <guid>http://veh47.github.io/post/go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      
        <description>不写测试的开发不是好程序员。然而可惜的是国内的程序员都不太关注测试这一部分。 这篇文章主要介绍下在Go语言中如何做单元测试和基准测试。 go tes</description>
      
    </item>
    
    <item>
      <title>Go语言中的并发编程</title>
      <link>http://veh47.github.io/post/go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Tue, 31 Dec 2019 17:45:23 +0800</pubDate>
      
      <guid>http://veh47.github.io/post/go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</guid>
      
        <description>Go语言的并发通过goroutine实现。goroutine类似于线程，属于用户态的线程，我们可以根据需要创建成千上万个goroutine并</description>
      
    </item>
    
    <item>
      <title>Go反射</title>
      <link>http://veh47.github.io/post/go%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Tue, 31 Dec 2019 17:29:38 +0800</pubDate>
      
      <guid>http://veh47.github.io/post/go%E5%8F%8D%E5%B0%84/</guid>
      
        <description>本文介绍了Go语言反射的意义和基本使用。 变量的内在机制 Go语言中的变量是分为两部分的: 类型信息：预先定义好的元信息。 值信息：程序运行过程中可</description>
      
    </item>
    
    <item>
      <title>Go数据格式</title>
      <link>http://veh47.github.io/post/go%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Tue, 31 Dec 2019 17:22:51 +0800</pubDate>
      
      <guid>http://veh47.github.io/post/go%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/</guid>
      
        <description>数据格式是系统中数据交互不可缺少的内容 这里主要介绍JSON、XML、MSGPack 将结构体的字符转换为小写的 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main</description>
      
    </item>
    
    <item>
      <title>Golang文件操作</title>
      <link>http://veh47.github.io/post/golang%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Tue, 31 Dec 2019 16:58:23 +0800</pubDate>
      
      <guid>http://veh47.github.io/post/golang%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</guid>
      
        <description>本文主要介绍了Go语言中文件读写的相关操作。 文件是什么？ 计算机中的文件是存储在外部介质（通常是磁盘）上的数据集合，文件分为文本文件和二进制文</description>
      
    </item>
    
    <item>
      <title>Go标准库log</title>
      <link>http://veh47.github.io/post/go%E6%A0%87%E5%87%86%E5%BA%93log/</link>
      <pubDate>Tue, 31 Dec 2019 16:54:01 +0800</pubDate>
      
      <guid>http://veh47.github.io/post/go%E6%A0%87%E5%87%86%E5%BA%93log/</guid>
      
        <description>无论是软件开发的调试阶段还是软件上线之后的运行阶段，日志一直都是非常重要的一个环节，我们也应该养成在程序中记录日志的好习惯。 Go语言内置的l</description>
      
    </item>
    
    <item>
      <title>Go标准库time</title>
      <link>http://veh47.github.io/post/go%E6%A0%87%E5%87%86%E5%BA%93time/</link>
      <pubDate>Tue, 31 Dec 2019 16:47:50 +0800</pubDate>
      
      <guid>http://veh47.github.io/post/go%E6%A0%87%E5%87%86%E5%BA%93time/</guid>
      
        <description>&lt;p&gt;时间和日期是我们编程中经常会用到的，本文主要介绍了Go语言内置的time包的基本用法。&lt;/p&gt;

&lt;p&gt;time包提供了时间的显示和测量用的函数。日历的计算采用的是公历。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Go标准库fmt</title>
      <link>http://veh47.github.io/post/go%E6%A0%87%E5%87%86%E5%BA%93fmt/</link>
      <pubDate>Tue, 31 Dec 2019 16:36:01 +0800</pubDate>
      
      <guid>http://veh47.github.io/post/go%E6%A0%87%E5%87%86%E5%BA%93fmt/</guid>
      
        <description>fmt标准库是我们在学习Go语言过程中接触最早最频繁的一个了，本文介绍了fmtb包的一些常用函数。 fmt包实现了类似C语言printf和sc</description>
      
    </item>
    
    <item>
      <title>Go基础包示例</title>
      <link>http://veh47.github.io/post/go%E5%9F%BA%E7%A1%80%E5%8C%85%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Tue, 31 Dec 2019 16:18:54 +0800</pubDate>
      
      <guid>http://veh47.github.io/post/go%E5%9F%BA%E7%A1%80%E5%8C%85%E7%A4%BA%E4%BE%8B/</guid>
      
        <description>在工程化的Go语言开发项目中，Go语言的源码复用是建立在包（package）基础之上的。本文介绍了Go语言中如何定义包、如何导出包的内容及如</description>
      
    </item>
    
    <item>
      <title>Go接口示例</title>
      <link>http://veh47.github.io/post/go%E6%8E%A5%E5%8F%A3%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Tue, 31 Dec 2019 16:05:45 +0800</pubDate>
      
      <guid>http://veh47.github.io/post/go%E6%8E%A5%E5%8F%A3%E7%A4%BA%E4%BE%8B/</guid>
      
        <description>接口（interface）定义了一个对象的行为规范，只定义规范不实现，由具体的对象来实现规范的细节。 在Go语言中接口（interface）是</description>
      
    </item>
    
    <item>
      <title>Go结构体示例</title>
      <link>http://veh47.github.io/post/go%E7%BB%93%E6%9E%84%E4%BD%93%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Tue, 31 Dec 2019 15:29:44 +0800</pubDate>
      
      <guid>http://veh47.github.io/post/go%E7%BB%93%E6%9E%84%E4%BD%93%E7%A4%BA%E4%BE%8B/</guid>
      
        <description>Go语言中没有“类”的概念，也不支持“类”的继承等面向对象的概念。Go语言中通过结构体的内嵌再配合接口比面向对象具有更高的扩展性和灵活性。 G</description>
      
    </item>
    
    <item>
      <title>Go指针示例</title>
      <link>http://veh47.github.io/post/go%E6%8C%87%E9%92%88%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Tue, 31 Dec 2019 15:20:33 +0800</pubDate>
      
      <guid>http://veh47.github.io/post/go%E6%8C%87%E9%92%88%E7%A4%BA%E4%BE%8B/</guid>
      
        <description>区别于C/C++中的指针，Go语言中的指针不能进行偏移和运算，是安全指针。 要搞明白Go语言中的指针需要先知道3个概念：指针地址、指针类型和指</description>
      
    </item>
    
    <item>
      <title>Go map示例</title>
      <link>http://veh47.github.io/post/go-map%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Tue, 31 Dec 2019 15:07:24 +0800</pubDate>
      
      <guid>http://veh47.github.io/post/go-map%E7%A4%BA%E4%BE%8B/</guid>
      
        <description>&lt;p&gt;Go语言中提供的映射关系容器为map，其内部使用散列表（hash）实现。&lt;/p&gt;

&lt;p&gt;map是一种无序的基于key-value的数据结构，Go语言中的map是引用类型，必须初始化才能使用。
Map 是go内置的数据结构，是一种无序的键值对的集合，可以通过key快速找到value的值&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
